symbol_check <- emotion.data[str_detect(emotion.data$author, "\\W") == TRUE,]
symbol_check
min_users <- emotion.data[str_length(emotion.data$author) == min(str_length(emotion.data$author)),]
min_users
length_big <- emotion.data[str_length(emotion.data$author)>15,]
length_big
symbol_ok <- emotion.data[str_detect(emotion.data$author, "\\W") == TRUE,]
symbol_ok
min_length <- emotion.data[str_length(emotion.data$author) == min(str_length(emotion.data$author)),]
min_length
caret_tweets <- (emotion.data[str_detect(emotion.data$content, "^") == TRUE,])
nrow(caret_tweets)
dollars_check <- (emotion.data[str_detect(emotion.data$content, "$$$") == TRUE,])
nrow(dollars_check)
nota_check <- (emotion.data[str_detect(emotion.data$content, "[Aa]") == FALSE,])
nrow(nota_check)
head(nota_check,10)
num_exclam <- str_count(emotion.data$content, "!")
summary(num_exclam)
emotion.data[str_count(emotion.data$content, "!") == max(num_exclam),]
caret_tweets <- (emotion.data[str_detect(emotion.data$content, "^") == TRUE,])
nrow(caret_tweets)
dollars_three <- (emotion.data[str_detect(emotion.data$content, "$$$") == TRUE,])
nrow(dollars_three)
no_a <- (emotion.data[str_detect(emotion.data$content, "[Aa]") == FALSE,])
nrow(no_a)
head(no_a,10)
num_exclamation <- str_count(emotion.data$content, "!")
summary(num_exclamation)
emotion.data[str_count(emotion.data$content, "!") == max(num_exclamation),]
nlevels(emotion.data$sentiment)
sentiments <- table(emotion.data$sentiment)
sentiments.freq <- as.data.frame(sentiments / nrow(emotion.data))
barplot(sentiments.freq, horiz = TRUE)
nlevels(emotion.data$sentiment)
sentiments <- table(emotion.data$sentiment)
sentiments.freq <- as.data.frame(sentiments / nrow(emotion.data))
barplot(sentiments.freq, horiz = TRUE)
sentimentsw
sentiments
nlevels(emotion.data$sentiment)
sentiments <- table(emotion.data$sentiment)
sentiments.proportion <- as.data.frame(sentiments / nrow(emotion.data))
barplot(sentiments.proportion, horiz = TRUE)
sentiments.proportion
nlevels(emotion.data$sentiment)
sentiments <- table(emotion.data$sentiment)
sentiments.proportion <- as.data.frame(sentiments / nrow(emotion.data))
barplot(sentiments.proportion)
type(sentiments.proportion)
mode(sentiments.proportion)
nlevels(emotion.data$sentiment)
sentiments <- table(emotion.data$sentiment)
sentiments.proportion <- data.frame(sentiments / nrow(emotion.data))
barplot(sentiments.proportion)
mode(sentiments.proportion)
library(stringr)
library(dplyr)
library(ggplot2)
nlevels(emotion.data$sentiment)
sentiments <- table(emotion.data$sentiment)
sentiments.proportion <- as.data.frame(sentiments / nrow(emotion.data))
barplot(sentiments.proportion)
nlevels(emotion.data$sentiment)
sentiments <- data.frame(emotion.data$sentiment)
sentiments.proportion <- as.data.frame(sentiments / nrow(emotion.data))
barplot(sentiments.proportion)
nlevels(emotion.data$sentiment)
sentiments <- data.frame(emotion.data$sentiment)
sentiments.proportion <- as.data.frame(sentiments / nrow(emotion.data))
barplot(sentiments.proportion, horiz = TRUE)
nlevels(emotion.data$sentiment)
sentiments <- data.frame(emotion.data$sentiment)
sentiments.proportion <- as.data.frame(sentiments / nrow(emotion.data))
barplot(sentiments.proportion, horiz = TRUE)
sentiments.length
sentiments.length <- emotion.data %>%
group_by(sentiments) %>%
summary(sentiments, str_length(emotion.data[,4]))
nlevels(emotion.data$sentiment)
sentiments <- data.frame(emotion.data$sentiment)
sentiments.proportion <- as.data.frame(sentiments / nrow(emotion.data))
barplot(sentiments.proportion, horiz = TRUE)
sentiments.length <- emotion.data %>%
group_by(sentiment) %>%
summary(sentiment, str_length(emotion.data[,4]))
nlevels(emotion.data$sentiment)
sentiments <- data.frame(emotion.data$sentiment)
sentiments.proportion <- as.data.frame(sentiments / nrow(emotion.data))
barplot(sentiments.proportion, horiz = TRUE)
sentiments.proportion
head(sentiments.proportion)
head(sentiments)
nlevels(emotion.data$sentiment)
table(emotion.data$sentiment)
nlevels(emotion.data$sentiment)
sentiments <- data.frame(emotion.data$sentiment)
table(emotion.data$sentiment)
sentiments.proportion <- as.data.frame(table(emotion.data$sentiment) / nrow(emotion.data))
barplot(sentiments.proportion, horiz = TRUE)
sentiments.proportion
nlevels(emotion.data$sentiment)
sentiments <- data.frame(emotion.data$sentiment)
table(emotion.data$sentiment)
sentiments.proportion <- as.data.frame(table(emotion.data$sentiment) / nrow(emotion.data))
ggplot(sentiments.proportion, aes(Freq)) +
geom_barplot(aes(horiz = TRUE))
library(stringr)
library(dplyr)
library(ggplot2)
origin <- "https://raw.githubusercontent.com/ucb-stat133/stat133-labs/master/data/text-emotion.csv"
destination <- 'emotion-txt.csv'
download.file(origin, destination)
nlevels(emotion.data$sentiment)
sentiments <- data.frame(emotion.data$sentiment)
table(emotion.data$sentiment)
sentiments.proportion <- as.data.frame(table(emotion.data$sentiment) / nrow(emotion.data))
ggplot(sentiments.proportion, aes(Freq)) +
geom_bar(aes(horiz = TRUE))
sentiments.length <- emotion.data %>%
group_by(sentiment) %>%
summary(sentiment, str_length(emotion.data[,4]))
nlevels(emotion.data$sentiment)
sentiments <- data.frame(emotion.data$sentiment)
table(emotion.data$sentiment)
sentiments.proportion <- as.data.frame(table(emotion.data$sentiment) / nrow(emotion.data))
ggplot(sentiments.proportion, aes(Freq)) +
geom_bar() +
coord_flip()
sentiments.length <- emotion.data %>%
group_by(sentiment) %>%
summary(sentiment, str_length(emotion.data[,4]))
sentiments.proportion
nlevels(emotion.data$sentiment)
sentiments <- data.frame(emotion.data$sentiment)
table(emotion.data$sentiment)
sentiments.proportion <- as.data.frame(table(emotion.data$sentiment) / nrow(emotion.data))
ggplot(sentiments.proportion, aes(x = Var1, y = Freq)) +
geom_bar() +
coord_flip()
nlevels(emotion.data$sentiment)
sentiments <- data.frame(emotion.data$sentiment)
table(emotion.data$sentiment)
sentiments.proportion <- as.data.frame(table(emotion.data$sentiment) / nrow(emotion.data))
ggplot(sentiments.proportion, aes(x = Var1, y = Freq)) +
geom_bar(stat = 'identity') +
coord_flip()
sentiments.length <- emotion.data %>%
group_by(sentiment) %>%
summary(sentiment, str_length(emotion.data[,4]))
nlevels(emotion.data$sentiment)
sentiments <- data.frame(emotion.data$sentiment)
table(emotion.data$sentiment)
sentiments.proportion <- as.data.frame(table(emotion.data$sentiment) / nrow(emotion.data))
arrange(sentiments.proportion)
ggplot(sentiments.proportion, aes(x = Var1, y = Freq)) +
geom_bar(stat = 'identity') +
coord_flip()
sentiments.length <- emotion.data %>%
group_by(sentiment) %>%
summary(sentiment, str_length(emotion.data[,4]))
nlevels(emotion.data$sentiment)
sentiments <- data.frame(emotion.data$sentiment)
table(emotion.data$sentiment)
sentiments.proportion <- as.data.frame(table(emotion.data$sentiment) / nrow(emotion.data))
sentiments.arranged <- arrange(sentiments.proportion)
ggplot(sentiments.proportion, aes(x = Var1, y = Freq)) +
geom_bar(stat = 'identity') +
coord_flip()
sentiments.length <- emotion.data %>%
group_by(sentiment) %>%
summary(sentiment, str_length(emotion.data[,4]))
nlevels(emotion.data$sentiment)
sentiments <- data.frame(emotion.data$sentiment)
table(emotion.data$sentiment)
sentiments.proportion <- as.data.frame(table(emotion.data$sentiment) / nrow(emotion.data))
sentiments.arranged <- arrange(sentiments.proportion)
ggplot(sentiments.arranged, aes(x = Var1, y = Freq)) +
geom_bar(stat = 'identity') +
coord_flip()
sentiments.length <- emotion.data %>%
group_by(sentiment) %>%
summary(sentiment, str_length(emotion.data[,4]))
nlevels(emotion.data$sentiment)
sentiments <- data.frame(emotion.data$sentiment)
table(emotion.data$sentiment)
sentiments.proportion <- as.data.frame(table(emotion.data$sentiment) / nrow(emotion.data))
sentiments.arranged <- arrange(sentiments.proportion, desc())
nlevels(emotion.data$sentiment)
sentiments <- data.frame(emotion.data$sentiment)
table(emotion.data$sentiment)
sentiments.proportion <- as.data.frame(table(emotion.data$sentiment) / nrow(emotion.data))
sentiments.arranged <- desc(sentiments.proportion)
ggplot(sentiments.arranged, aes(x = Var1, y = Freq)) +
geom_bar(stat = 'identity') +
coord_flip()
mode(sentiments.proportion)
typeof(sentiments.proportion)
head(sentiments.proportion)
nlevels(emotion.data$sentiment)
sentiments <- data.frame(emotion.data$sentiment)
table(emotion.data$sentiment)
sentiments.proportion <- as.data.frame(table(emotion.data$sentiment) / nrow(emotion.data))
sentiments.arranged <- desc(sentiments.proportion$Freq)
ggplot(sentiments.arranged, aes(x = Var1, y = Freq)) +
geom_bar(stat = 'identity') +
coord_flip()
head(sentiments.arranged)
sentiments.arranged
nlevels(emotion.data$sentiment)
sentiments <- data.frame(emotion.data$sentiment)
table(emotion.data$sentiment)
sentiments.proportion <- as.data.frame(table(emotion.data$sentiment) / nrow(emotion.data))
sentiments.arranged <- sentiments.proportion %>%
arrange(desc(sentiments.arranged))
ggplot(sentiments.arranged, aes(x = Var1, y = Freq)) +
geom_bar(stat = 'identity') +
coord_flip()
sentiments.length <- emotion.data %>%
group_by(sentiment) %>%
summary(sentiment, str_length(emotion.data[,4]))
sentiments.arranged
nlevels(emotion.data$sentiment)
sentiments <- data.frame(emotion.data$sentiment)
table(emotion.data$sentiment)
sentiments.proportion <- as.data.frame(table(emotion.data$sentiment) / nrow(emotion.data))
sentiments.arranged <- sentiments.proportion %>%
arrange(desc(sentiments.arranged))
nlevels(emotion.data$sentiment)
sentiments <- data.frame(emotion.data$sentiment)
table(emotion.data$sentiment)
sentiments.proportion <- as.data.frame(table(emotion.data$sentiment) / nrow(emotion.data))
sentiments.arranged <- sentiments.proportion %>%
arrange(desc(sentiments.proportion))
sentiments.proportion
sentiments.arranged
nlevels(emotion.data$sentiment)
sentiments <- data.frame(emotion.data$sentiment)
table(emotion.data$sentiment)
sentiments.proportion <- as.data.frame(table(emotion.data$sentiment) / nrow(emotion.data))
sentiments.arranged <- sentiments.proportion %>%
arrange(desc(sentiments.proportion$Freq))
ggplot(sentiments.arranged, aes(x = Var1, y = Freq)) +
geom_bar(stat = 'identity') +
coord_flip()
sentiments.length <- emotion.data %>%
group_by(sentiment) %>%
summarize(str_length(emotion.data[,4]))
sentiments.arranged
sentiments.length <- emotion.data %>%
group_by(sentiment) %>%
summarize(str_length(emotion.data[,4]))
nlevels(emotion.data$sentiment)
sentiments <- data.frame(emotion.data$sentiment)
table(emotion.data$sentiment)
sentiments.proportion <- as.data.frame(table(emotion.data$sentiment) / nrow(emotion.data))
sentiments.arranged <- sentiments.proportion %>%
arrange(desc(sentiments.proportion$Freq))
ggplot(sentiments.arranged, aes(x = Var1, y = Freq)) +
geom_bar(stat = 'identity') +
coord_flip()
sentiments.length <- emotion.data %>%
group_by(sentiment) %>%
summarize(mean(str_length(emotion.data[,4])))
sentiments.length
head(emotion.data)
nlevels(emotion.data$sentiment)
sentiments <- data.frame(emotion.data$sentiment)
table(emotion.data$sentiment)
sentiments.proportion <- as.data.frame(table(emotion.data$sentiment) / nrow(emotion.data))
sentiments.arranged <- sentiments.proportion %>%
arrange(desc(sentiments.proportion$Freq))
ggplot(sentiments.arranged, aes(x = Var1, y = Freq)) +
geom_bar(stat = 'identity') +
coord_flip()
sentiments.length <- emotion.data %>%
group_by(sentiment) %>%
summarize(mean(str_count(emotion.data[,4])))
sentiments.length
nlevels(emotion.data$sentiment)
sentiments <- data.frame(emotion.data$sentiment)
table(emotion.data$sentiment)
sentiments.proportion <- as.data.frame(table(emotion.data$sentiment) / nrow(emotion.data))
sentiments.arranged <- sentiments.proportion %>%
arrange(desc(sentiments.proportion$Freq))
ggplot(sentiments.arranged, aes(x = Var1, y = Freq)) +
geom_bar(stat = 'identity') +
coord_flip()
sentiments.length <- emotion.data %>%
group_by(sentiment) %>%
summarize(mean(str_length(content)))
sentiments.length
head(sentiments.arranged)
nlevels(emotion.data$sentiment)
sentiments <- data.frame(emotion.data$sentiment)
table(emotion.data$sentiment)
sentiments.proportion <- as.data.frame(table(emotion.data$sentiment) / nrow(emotion.data))
sentiments.arranged <- sentiments.proportion %>%
arrange(desc(sentiments.proportion$Freq))
ggplot(sentiments.arranged, aes(x = Var1, y = Freq)) +
geom_bar(stat = 'identity') +
coord_flip()
sentiments.length <- emotion.data %>%
group_by(sentiment) %>%
summarize(average = mean(str_length(content)))
sentiments.length
nlevels(emotion.data$sentiment)
sentiments <- data.frame(emotion.data$sentiment)
table(emotion.data$sentiment)
sentiments.proportion <- as.data.frame(table(emotion.data$sentiment) / nrow(emotion.data))
sentiments.arranged <- sentiments.proportion %>%
arrange(desc(sentiments.proportion$Freq))
ggplot(sentiments.arranged, aes(x = reorder(Var1, -Freq), y = Freq)) +
geom_bar(stat = 'identity') +
coord_flip()
sentiments.length <- emotion.data %>%
group_by(sentiment) %>%
summarize(average = mean(str_length(content)))
sentiments.length
nlevels(emotion.data$sentiment)
sentiments <- data.frame(emotion.data$sentiment)
table(emotion.data$sentiment)
sentiments.proportion <- as.data.frame(table(emotion.data$sentiment) / nrow(emotion.data))
sentiments.arranged <- sentiments.proportion %>%
arrange(desc(sentiments.proportion$Freq))
ggplot(sentiments.arranged, aes(x = reorder(Var1, Freq), y = Freq)) +
geom_bar(stat = 'identity') +
coord_flip()
sentiments.length <- emotion.data %>%
group_by(sentiment) %>%
summarize(average = mean(str_length(content)))
sentiments.length
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
context("Check checking function arguments")
test_that("check_prob fails with invalid args",{
expect_true(check_prob(.5))
expect_error(check_prob(2))
expect_error(check_prob(c(.5,.2)))
expect_error(check_prob(-.5),
"prob has to be a numeric value between 0 and 1")
})
test_that("check_trials fails with invalid args", {
expect_true(check_trials(100))
expect_error(check_trials(-2))
expect_error(check_trials(10.5),
"invalid number of trials")
})
test_that("check_successes fails with invalid args", {
expect_true(check_successes(3, 5))
expect_error(check_successes(-1, 5),
"Success values must be positive integers")
expect_error(check_successes(6, 5),
"number of success must be less than or equal to trials")
})
library(testthat)
library(binomial)
test_check("binomial")
source('C:/Users/Wavid/Desktop/stat133/workouts/binomial/R/binomial.R', echo=TRUE)
aux_mean(6, .5)
aux_mean(5, .5)
aux_mean(3, 3,3 )
aux_mean(10, 5)
aux_mean(20, 1)
aux_variance(1, 1)
aux_variance(2, .5)
aux_variance(2000, .75)
aux_mode(1, .5)
aux_mode(1000, .25)
aux_skewness(1000, .5)
aux_skewness(1000, .25)
aux_skewness(1, .25)
aux_skewness(10, .25)
aux_skewness(1000, 0)
aux_skewness(1000, 1)
aux_skewness(1000, 0)
aux_kurtosis(1000, 1)
aux_kurtosis(1000, .5)
aux_kurtosis(1000, .5)
aux_kurtosis(10, .5)
aux_kurtosis(10, .25)
aux_kurtosis(10, .75)
aux_kurtosis(10, .5)
bin_choose(6, 5)
bin_choose(5, 6)
bin_choose(6, 3)
bin_choose(5, 3)
bin_choose(7.4, 4)
bin_choose(6.5, 4)
bin_choose(10, 1:3)
bin_probability(success = 2, trials = 5, prob = 0.5)
bin_probability(success = 6, trials = 5, prob = 0.5)
bin_probability(6, 5)
bin_distribution(6, 5)
bin_distribution(5, .5)
head(bin_distribution(5, .5))
bin_distribution(5, 2)
head(bin_distribution(1, 1))
head(bin_distribution(1, 1)$probability)
head(bin_distribution(5, .5)$probability)
head(bin_distribution(5, .5)$success)
bin_cumulative(5, 2)
head(bin_culu)
head(bin_cumulative(5, .5)$success)
head(bin_cumulative(5, .5)$probability)
bin_cumulative(5,.5)
devtools::load_all()
setwd("C:/Users/Wavid/Desktop/stat133/workouts/binomial/R")
devtools::load_all()
devtools::build(".")
source('C:/Users/Wavid/Desktop/stat133/workouts/binomial/tests/testthat.R', echo=TRUE)
devtools::use_testthat()
source('C:/Users/Wavid/Desktop/stat133/workouts/binomial/tests/testthat.R', echo=TRUE)
devtools::test()
context("Check checking function arguments")
test_that("check_prob fails with invalid args",{
expect_true(check_prob(.5))
expect_error(check_prob(2))
expect_error(check_prob(c(.5,.2)))
expect_error(check_prob(-.5),
"prob has to be a numeric value between 0 and 1")
})
test_that("check_trials fails with invalid args", {
expect_true(check_trials(100))
expect_error(check_trials(-2))
expect_error(check_trials(10.5),
"invalid number of trials")
})
test_that("check_success fails with invalid args", {
expect_true(check_success(3, 5))
expect_error(check_success(-1, 5),
"Success values must be positive integers")
expect_error(check_success(6, 5),
"number of success must be less than or equal to trials")
})
devtools::test()
check_prob(c(0.5, 0.2))
context("Check checking function arguments")
test_that("check_prob fails with invalid args",{
expect_true(check_prob(.5))
expect_error(check_prob(2))
expect_error(check_prob(-.5),
"prob has to be a numeric value between 0 and 1")
})
test_that("check_trials fails with invalid args", {
expect_true(check_trials(100))
expect_error(check_trials(-2))
expect_error(check_trials(10.5),
"invalid number of trials")
})
test_that("check_success fails with invalid args", {
expect_true(check_success(3, 5))
expect_error(check_success(-1, 5),
"Success values must be positive integers")
expect_error(check_success(6, 5),
"number of success must be less than or equal to trials")
})
check_prob(c(0.5, 0.2))
devtools::test()
aux_variance(200, 0.75)
devtools::test()
aux_skewness(1000,1)
aux_mode(1, 2)
aux_mode(1, 1)
aux_mode(.75, 2)
aux_mode(.7, 2)
aux_mode(2, .75)
source('C:/Users/Wavid/Desktop/stat133/workouts/binomial/tests/testthat/test-results-aux_functions.R', echo=TRUE)
devtools::test()
devtools::build()
devtools::document()
devtools::build()
library(binomial)
install.packages("binomial")
install.packages("binomial")
install.packages("binomial")
library()
library(binomial)
knitr::opts_chunk$set(echo = TRUE)
library(binomial)
bin_var <- bin_variable(10, .4)
bin_var
bin_var$trials
bin_var$prob
summary(bin_var)
summary(bin_var)
mean(5, .5)
summary(bin_var)
mean(10, .4)
variance(10, .4)
summary(bin_var)
bin_mean(10, .4)
bin_variance(10, .4)
bin_mode(10, .4)
bin_skewness(10, .4)
bin_kurtosis(10, .4)
bin_var <- bin_variable(10, .4)
bin_var
bin_var$trials
bin_var$prob
summary(bin_var)
bin_mean(10, .4)
bin_variance(10, .4)
bin_mode(10, .4)
bin_skewness(10, .4)
bin_kurtosis(10, .4)
pdf_var <- bin_distribution(bin_var$trials, bin_var$prob)
pdf_var
cdf_var <- bin_cumulative(bin_var$trials, bin_var$prob)
cdf_var
plot(pdf_bin_var)
plot(pdf_var)
plot(cdf_var)
